#include <iostream>
using namespace std;

#define MAX_SIZE 100

class Stack {
private:
    int arr[MAX_SIZE];
    int top;

public:
    Stack() {
        top = -1;
    }

    bool isEmpty() {
        return top == -1;
    }

    bool isFull() {
        return top == MAX_SIZE - 1;
    }

    void push(int value) {
        if (isFull()) {
            cout << "Stack overflow! Cannot push element." << endl;
        } else {
            arr[++top] = value;
            cout << "Pushed " << value << " into the stack." << endl;
        }
    }

    void pop() {
        if (isEmpty()) {
            cout << "Stack is empty. Cannot pop element." << endl;
        } else {
            int value = arr[top--];
            cout << "Popped " << value << " from the stack." << endl;
        }
    }

    int peek() {
        if (isEmpty()) {
            cout << "Stack is empty." << endl;
            return -1;
        }
        return arr[top];
    }

    void display() {
        if (isEmpty()) {
            cout << "Stack is empty." << endl;
        } else {
            cout << "Stack elements: ";
            for (int i = top; i >= 0; i--) {
                cout << arr[i] << " ";
            }
            cout << endl;
        }
    }
    int getMaxElement()
    {
        if(top<0)
        {
            cout<<"Stack is Empty " <<endl ;
            return - 1 ;
        }
        int maxElemet =arr[0] ;
        for(int i = 1 ; i <=top ; i++)
        {
            if(arr[i]>maxElemet)
            {
                maxElemet=arr[i] ;
            }
        }
        return maxElemet ;
    }
    void deleteMaxElement() {
        int maxElement = getMaxElement();
        if (maxElement == -1) {
            cout << "Cannot delete maximum element. Stack is empty." << endl;
            return;
        }

        Stack tempStack;
        while (!isEmpty()) {
            int element = peek();
            if (element == maxElement) {
                pop();
            } else {
                tempStack.push(element);
                pop();
            }
        }

        while (!tempStack.isEmpty()) {
            push(tempStack.peek());
            tempStack.pop();
        }

        cout << "Deleted maximum element from the stack: " << maxElement << endl;
    }
};

int main() {
    Stack stack;
    int choice, value;

    while (true) {
        cout << "1) Push" << endl;
        cout << "2) Pop" << endl;
        cout << "3) Peek" << endl;
        cout << "4) Display stack" << endl;
        cout<<  "5)Max Element "  <<endl ;
        cout << ") Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter element to push: ";
                cin >> value;
                stack.push(value);
                break;
            case 2:
                stack.pop();
                break;
            case 3:
                cout << "Top element: " << stack.peek() << endl;
                break;
            case 4:
                stack.display();
                break;
            case 5  :
               cout<<"maximum element is " << stack .getMaxElement()<<endl ;
                break ;
            case 6:
                cout << "Exiting program." << endl;
                exit(0);
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}
