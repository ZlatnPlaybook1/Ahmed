#include <iostream>
using namespace std;

// Function to swap two elements
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Partitioning the array on the basis of a pivot element
int partition(int arr[], int low, int high) {
    int pivot = arr[high];  // Choosing the last element as the pivot
    int i = (low - 1);      // Index of the smaller element

    for (int j = low; j <= high - 1; j++) {
        // If the current element is smaller than the pivot
        if (arr[j] < pivot) {
            i++;  // Increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

// Recursive function to perform quicksort
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        // Partition the array
        int pivot = partition(arr, low, high);

        // Sort the subarrays on the left and right of the pivot
        quickSort(arr, low, pivot - 1);
        quickSort(arr, pivot + 1, high);
    }
}

// Function to print the array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

// Test the algorithm
int main() {
    int arr[] = {9, 2, 6, 4, 3, 5, 1, 7, 8};
    int size = sizeof(arr) / sizeof(arr[0]);

    cout << "Original array:" << endl;
    printArray(arr, size);

    quickSort(arr, 0, size - 1);

    cout << "Sorted array:" << endl;
    printArray(arr, size);

    return 0;
}
